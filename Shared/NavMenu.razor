@inject IJSRuntime JS;
@inject NavigationManager NavigationManager;
@inject IHttpClientFactory httpFactory;
@using System.Text;
@using ThetaFTP.Shared.Classes;
@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared;

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage protectedLocalStorage;

@if((NavigationManager.ToAbsoluteUri("gauth-complete") != new Uri(NavigationManager.Uri) && Shared.configurations?.enable_google_login == true) || (Shared.configurations?.enable_google_login == false))
{
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid" style="display: flex">

            <a class="navbar-brand" href="/" @onclick=@(()=>Navigate("/", false))>
                <img alt="Logo" width="30" height="24" class="d-inline-block align-text-top" src="./images/ThetaDrive logo.png" style="height:80px;width:120px;">
            </a>

            @if (RelativeUri != "log-in" && RelativeUri != "register")
            {
                <button class="navbar-toggler" style="margin-right:40px;" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
            }

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    @if (AuthState == "Log out")
                    {
                        <li class="nav-item">
                            <a class="nav-link menu_label" style=@(new StringBuilder("margin-left:15px;color:").Append(first_menu_item_state).ToString()) aria-current="page" href="" @onclick=ActivateProfilePanel>Profile</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu_label" style=@(new StringBuilder("margin-top:16px;margin-left:15px;color:").Append(second_menu_item_state).ToString()) href="" @onclick=@(()=>Navigate("/log-in", true))>@AuthState</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link menu_label" style="margin-top:16px;margin-left:15px;" href="https://github.com/CSharpTeoMan911/ThetaFTP">
                                <img style="height: 40px" src="./images/github.webp" />
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>

    @if (ShowProfilePanel == true)
    {
        <ProfilePanel style="z-index:10" closePanel="new ProfilePanel.ClosePanel(CloseProfilePanel)" use_key_validation="true"/>
    }
    </nav>   
}


@code {
    private string? RelativeUri { get; set; }

    private bool ShowProfilePanel { get; set; }

    private string AuthState { get; set; } = "Log out";

    private string first_menu_item_state { get; set; } = "#066FC4";

    private string second_menu_item_state { get; set; } = "#044275";

    private bool Loaded { get; set; }
    private bool Init { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        RelativeUri = NavigationManager.Uri.Remove(0, NavigationManager.BaseUri.Length);
        base.OnAfterRender(firstRender);

        if(firstRender == true)
        {
            Loaded = true;
            StateHasChanged();
        }

        if (Loaded == true && Init == false)
        {
            Init = true;
            Initiation();
        }
    }

    private async void Initiation()
    {
        if(Loaded == true)
        {
            string? AuthCache = null;

            try
            {
                IJSObjectReference animation_module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/animations.js");
                await animation_module.InvokeVoidAsync("InitBackgroundGradientFluctuation");
                await animation_module.InvokeVoidAsync("InitMainPanelGeometry");
                await animation_module.InvokeVoidAsync("InitFocusPanelGeometry");
                await animation_module.DisposeAsync();
                StateHasChanged();

                IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");

                if (Shared.configurations?.use_secure_local_storage == true)
                {
                    ProtectedBrowserStorageResult<string> AuthCacheResult = await protectedLocalStorage.GetAsync<string>("AuthCache");
                    AuthCache = AuthCacheResult.Value;
                }
                else
                {
                    AuthCache = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    await module.DisposeAsync();
                }
            }
            catch { }


            if (AuthCache == null)
            {
                if (AuthState != "Log in")
                {
                    AuthState = "Log in";
                    StateHasChanged();
                }

                if((NavigationManager.ToAbsoluteUri("gauth-complete") != new Uri(NavigationManager.Uri) && Shared.configurations?.enable_google_login == true) || (Shared.configurations?.enable_google_login == false))
                    if (NavigationManager.ToAbsoluteUri("log-in") != new Uri(NavigationManager.Uri) || NavigationManager.ToAbsoluteUri("register") != new Uri(NavigationManager.Uri))
                        NavigationManager.NavigateTo("log-in", false);
            }


            if (NavigationManager.ToAbsoluteUri("log-in") == new Uri(NavigationManager.Uri))
            {
                first_menu_item_state = "#066FC4";
                second_menu_item_state = "#044275";
            }
            else if (NavigationManager.ToAbsoluteUri("files") == new Uri(NavigationManager.Uri))
            {
                second_menu_item_state = "#066FC4";
                first_menu_item_state = "#044275";
            }
        }
    }

    private async void Navigate(string partial_uri, bool auth)
    {
        if(Loaded)
        {
            if (auth == true)
            {
                if (AuthState == "Log out")
                {
                    string? key = null;

                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "././js/functions.js");

                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        ProtectedBrowserStorageResult<string> AuthCacheResult = await protectedLocalStorage.GetAsync<string>("AuthCache");
                        key = AuthCacheResult.Value;
                    }
                    else
                    {
                        key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    }

                    StringBuilder builder = new StringBuilder("/validation/delete-session?value=");
                    builder.Append(System.Web.HttpUtility.UrlEncode(key));

                    HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig);
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);
                    HttpResponseMessage responseMessage = await client.DeleteAsync(builder.ToString());


                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        await protectedLocalStorage.DeleteAsync("AuthCache");
                    }
                    else
                    {
                        await module.InvokeVoidAsync("Delete_Cache", "auth", "AuthCache");
                    }

                    await module.DisposeAsync();
                }
            }

            NavigationManager.NavigateTo(partial_uri, true);
        }
    }

    private void ActivateProfilePanel()
    {
        ShowProfilePanel = true;

        StateHasChanged();
    }

    private void CloseProfilePanel()
    {
        ShowProfilePanel = false;

        StateHasChanged();
    }
}
