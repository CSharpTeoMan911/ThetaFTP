@inject IJSRuntime JS;
@inject NavigationManager NavigationManager;
@using System.Text;
@using ThetaFTP.Shared.Classes;

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#" @onclick=@(()=>Navigate("/", false))>
            <img alt="Logo" width="30" height="24" class="d-inline-block align-text-top" src="./images/ThetaDrive logo.png" style="height:80px;width:120px;">
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link menu_label" style=@(new StringBuilder("margin-left:15px;color:").Append(first_menu_item_state).ToString()) aria-current="page" href="#" @onclick=@(()=>Navigate("/", false))>Files</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link menu_label" style=@(new StringBuilder("margin-top:16px;margin-left:15px;color:").Append(second_menu_item_state).ToString()) href="#" @onclick=@(()=>Navigate("/log-in", true))>@AuthState</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code {
    private string AuthState { get; set; } = "Log out";

    //private string active { get; set; } = "#066FC4";

    //private string inactive { get; set; } = "#044275";

    private string first_menu_item_state { get; set; } = "#066FC4";

    private string second_menu_item_state { get; set; } = "#044275";

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        string? AuthCache = null;

        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
            AuthCache = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

            if (firstRender == true)
            {
                IJSObjectReference animation_module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/animations.js");
                await animation_module.InvokeVoidAsync("InitBackgroundGradientFluctuation");
            }
        }
        catch{}


        if (AuthCache == null)
        {
            if (AuthState != "Log in")
            {
                AuthState = "Log in";
                StateHasChanged();
            }

            if (NavigationManager.ToAbsoluteUri("log-in") != new Uri(NavigationManager.Uri) || NavigationManager.ToAbsoluteUri("register") != new Uri(NavigationManager.Uri))
                NavigationManager.NavigateTo("log-in", false);
        }


        if (NavigationManager.ToAbsoluteUri("log-in") == new Uri(NavigationManager.Uri))
        {
            first_menu_item_state = "#066FC4";
            second_menu_item_state = "#044275";
        }
        else if (NavigationManager.ToAbsoluteUri("files") == new Uri(NavigationManager.Uri))
        {
            second_menu_item_state = "#066FC4";
            first_menu_item_state = "#044275";
        }

    }

    private async void Navigate(string partial_uri, bool auth)
    {
        if (auth == true)
        {
            if (AuthState == "Log out")
            {
                IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "././js/functions.js");

                string? key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

                StringBuilder builder = new StringBuilder("/validation/delete-session?value=");
                builder.Append(System.Web.HttpUtility.UrlEncode(key));

                HttpClient client = HttpClientGen.Generate();
                client.BaseAddress = new Uri(NavigationManager.BaseUri);
                HttpResponseMessage responseMessage = await client.DeleteAsync(builder.ToString());

                await module.InvokeVoidAsync("Delete_Cache", "auth", "AuthCache");
            }
        }

        NavigationManager.NavigateTo(partial_uri, true);
    }
}
