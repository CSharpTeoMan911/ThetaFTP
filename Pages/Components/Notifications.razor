@if (notificationType == NotificationType.Error)
{
    <div class="toast show notification_panel" role="alert" aria-live="assertive" aria-atomic="true" style=@style>
        <div class="toast-header">
            <img src="./images/close.webp" class="rounded me-2 notification_image" alt="...">
            <strong class="me-auto">@notificationType.ToString()</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close" @onclick="CloseNotification_"></button>
        </div>
        <div class="toast-body">
            @NotificationMessage
        </div>
    </div>
}
else
{
    <div class="toast show notification_panel" role="alert" aria-live="assertive" aria-atomic="true" style=@style>
        <div class="toast-header">
            <img src="./images/notification-bell.webp" class="rounded me-2 notification_image" alt="...">
            <strong class="me-auto">@notificationType.ToString()</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close" @onclick="CloseNotification_"></button>
        </div>
        <div class="toast-body">
            @NotificationMessage
        </div>
    </div>
}


@code {
    public enum NotificationType
    {
        Error,
        Information
    }

    private DateTime render_time { get; set; }

    public delegate void CloseNotification();

    [Parameter] public CloseNotification? closeNotification { get; set; }
    [Parameter] public string? NotificationMessage { get; set; }
    [Parameter] public NotificationType notificationType { get; set; }
    [Parameter] public string? style { get; set; }

    private System.Timers.Timer timer { get; set; }
    private bool Loaded { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender == true)
        {
            Loaded = true;
            StateHasChanged();
        }

        if (Loaded == true)
        {
            render_time = DateTime.Now;
            if (timer == null)
            {
                timer = new System.Timers.Timer();
                timer.Elapsed += ElapsedTime;
                timer.Interval = 100;
                timer.Start();
            }
        }
    }

    public void ElapsedTime(object? sender, System.Timers.ElapsedEventArgs args)
    {
        if ((DateTime.Now - render_time).TotalSeconds >= 4)
        {
            CloseNotification_();
        }
    }

    public async void CloseNotification_()
    {
        timer?.Stop();
        timer?.Dispose();
        await InvokeAsync(() =>
        {
            closeNotification?.Invoke();
        });
    }
}
