@using ThetaFTP.Shared.Formatters;
@using ThetaFTP.Shared.Models;
@using ThetaFTP.Shared.Classes;
@using System.Text;
@inject IJSRuntime JS;
@inject IHttpClientFactory httpFactory;
@inject NavigationManager NavigationManager;

<FocusPanel style="z-index:5;">
    <Component>
        <div class="jumbotron" style="padding:5px; display:flex; flex-direction:column; width:fit-content; align-self:center; margin-top: 300px;">
            <div style="display:flex; flex-direction:row-reverse">
                <button class="close_button">
                    <img src="./images/close.webp" style="width:20px;" @onclick="@Close"/>
                </button>
            </div>

            <div style="display:flex; flex-direction:column">
                <div style="display: flex; flex-direction:row">
                    @if(ShowBackButton == true){
                        <div style="display: flex; align-self:center; align-content:center">
                            <button style="display: flex; align-self:center; align-content:center; border-color: transparent" @onclick=Back>
                                <img src="./images/left-arrow.webp" style="height: 15px; align-self:center" />
                            </button>
                            <p style="align-self:center; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 20px">
                                @last_dir
                            </p>
                        </div>
                    }
                </div>
                <div style="display:flex; flex-direction:column; overflow-y:auto; width:calc(220px + 20vw); height:300px;">
                    @for (int i = 0; i < directories?.Count; i++)
                    {
                        bool show = false;
                        DirectoryItem? item = directories?.ElementAt(i);

                        if (selected_item?.name != item?.name)
                            show = true;
                        else
                            if(Path != SrcPath)
                                show = true;

                        if (show == true)
                        {
                            <div style="display: flex; flex-direction: row; padding: 20px;">
                                <div style="display: flex; flex-direction: row; width: 50%">
                                    <img src="./images/folder.webp" style="width:40px; height:40px" />
                                    <input class="display" value=" @item?.name" readonly="readonly" />
                                </div>
                                <div style="display:flex; flex-direction:row-reverse; width: 50%">
                                    <button @onclick=@(()=>Open(item)) class="file_relocation" style="margin-left:30px; background-color: black; color: white; border-color: black;">
                                        Open
                                    </button>
                                    <button @onclick=@(()=>Select(item)) class="file_relocation" style="">
                                        Select
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </Component>
</FocusPanel>

@code {
    private bool ShowBackButton{ get; set; }
    private string? last_dir { get; set; }

    private List<DirectoryItem>? directories { get; set; }

    [Parameter] public string? Path { get; set; }
    private string? SrcPath { get; set; }

    public delegate void ClosePanel();
    [Parameter] public ClosePanel? closePanel { get; set; }

    [Parameter] public DirectoryItem? selected_item {get;set;}

    private void Close() => closePanel?.Invoke();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender == true)
        {
            SrcPath = Path;
            GetDirectories();
        }
    }

    private async void GetDirectories()
    {
        Tuple<bool, string?> last_dir_ = await FileSystemFormatter.GetLastDir(Path);

        ShowBackButton = last_dir_.Item1;
        last_dir = last_dir_.Item2;

        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
        string log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

        Metadata metadata = new Metadata()
        {
            path = Path,
            key = log_in_session_key
        };

        string? url = new StringBuilder().Append("/directories/get-directories?").Append(await QueryParsing.QueryParser(metadata)).ToString();

        HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig);
        client.BaseAddress = new Uri(NavigationManager.BaseUri);

        HttpResponseMessage httpResponse = await client.GetAsync(url);
        string result = await httpResponse.Content.ReadAsStringAsync();

        directories = await JsonFormatter.JsonDeserialiser<List<DirectoryItem>?>(result);
        StateHasChanged();
    }


    private void Back()
    {
        directories?.Clear();
        Path = FileSystemFormatter.NavigateBackward(Path);
        GetDirectories();
    }

    private void Open(DirectoryItem? item)
    {
        directories?.Clear();
        Path = FileSystemFormatter.NavigateForward(Path, item?.name);
        GetDirectories();
    }

    private async void Select(DirectoryItem? item)
    {
        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
        string log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
        await module.DisposeAsync();

        string? selected_path = new StringBuilder(Path).Append(item?.name).ToString();
        StringBuilder? request_url = new StringBuilder();

        if (selected_item?.isDirectory == false)
        {
            FileOperationMetadata fileOperationMetadata = new FileOperationMetadata()
            {
                key = log_in_session_key,
                file_name = selected_item?.name,
                path = Path,
                new_path = selected_path
            };
            request_url.Append("/files/relocate?").Append(await QueryParsing.QueryParser(fileOperationMetadata));
        }
        else
        {
            DirectoryOperationMetadata directoryOperationMetadata = new DirectoryOperationMetadata()
            {
                key = log_in_session_key,
                directory_name = selected_item?.name,
                path = Path,
                new_path = selected_path
            };
            request_url.Append("/directories/relocate?").Append(await QueryParsing.QueryParser(directoryOperationMetadata));
        }

        HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig);
        client.BaseAddress = new Uri(NavigationManager.BaseUri);
        HttpResponseMessage responseMessage = await client.PutAsync(request_url.ToString(), null);

        string response = await responseMessage.Content.ReadAsStringAsync();
    }
}
