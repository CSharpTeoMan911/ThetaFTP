<div style="@style">
    <div>
        <h2 class="input_title">
            @inputSectionTitle
        </h2>
    </div>

    <div style="display:flex;flex-direction:column;align-self:center;">
        @if(isPassword)
        {
            @if (input_with_button == true)
            {
                <div style="width:100%; display:flex; flex-direction: row; align-content:center">
                    <input class="@(smallInputFont == true ? "input_style_small" : "input_style")" style="align-self:center" autocomplete="@(autocompleteOff == true ? "new-password" : "on")" type="password" placeholder=@placeholder value=@defaultValue @oninput=OnInput />
                    @InputButton
                </div>
            }
            else
            {
                <div style="display: flex; flex-direction: row; align-content:center">
                    <input style="width: 100%;" class="@(smallInputFont == true ? "input_style_small" : "input_style")" autocomplete="@(autocompleteOff == true ? "new-password" : "on")" type="@(visibility == true ? "text" : "password")" placeholder=@placeholder value=@defaultValue @oninput=OnInput />
                    <PasswordVisibilityButton visible=@visibility changeCallback="ChangeVisibility"/>
                </div>
            }
        }
        else
        {
            @if (input_with_button == true)
            {
                <div style="width:100%; display:flex; flex-direction: row; align-content:center">
                    @if (isReadOnly == true)
                    {
                        <input class="@(smallInputFont == true ? "input_style_small" : "input_style")" autocomplete="@(autocompleteOff == true ? "new-password" : "on")" readonly="readonly" style="align-self:center;" placeholder=@placeholder value=@defaultValue @oninput=OnInput />
                    }
                    else
                    {
                        <input class="@(smallInputFont == true ? "input_style_small" : "input_style")" autocomplete="@(autocompleteOff == true ? "new-password" : "on")" style="align-self:center;" placeholder=@placeholder value=@defaultValue @oninput=OnInput />
                    }
                    @InputButton
                </div>
            }
            else
            {
                @if (isReadOnly == true)
                {
                    <input class="@(smallInputFont == true ? "input_style_small" : "input_style")" autocomplete="@(autocompleteOff == true ? "new-password" : "on")" readonly="readonly" placeholder=@placeholder value=@defaultValue @oninput=OnInput />
                }
                else
                {
                    <input class="@(smallInputFont == true ? "input_style_small" : "input_style")" autocomplete="@(autocompleteOff == true ? "new-password" : "on")" placeholder=@placeholder value=@defaultValue @oninput=OnInput />
                }
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public bool smallInputFont { get; set; }

    [Parameter]
    public bool autocompleteOff { get; set; }

    [Parameter]
    public bool isPassword { get; set; }

    [Parameter]
    public bool isReadOnly { get; set; }

    [Parameter]
    public string? inputSectionTitle { get; set; }

    public delegate void InputValue(string? val);

    [Parameter]
    public InputValue? inputValue { get; set; }

    [Parameter]
    public string? style { get; set; }

    [Parameter]
    public bool input_with_button { get; set; }

    [Parameter]
    public string? placeholder { get; set; } = String.Empty;

    [Parameter]
    public string? defaultValue { get; set; } = String.Empty;

    [Parameter] public RenderFragment? InputButton { get; set; }

    private bool visibility { get; set; }


    private void OnInput(ChangeEventArgs args)
    {
        inputValue?.Invoke(args?.Value?.ToString());
    }

    private void ChangeVisibility()
    {
        visibility = !visibility;
        StateHasChanged();
    }
}
