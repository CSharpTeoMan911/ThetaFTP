@using ThetaFTP.Shared;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using ThetaFTP.Shared.Formatters;
@using ThetaFTP.Shared.Models
@inject ProtectedLocalStorage protectedLocalStorage;
@inject NavigationManager NavigationManager;
@inject IHttpClientFactory clientFactory;
@inject IJSRuntime JS;



@if (ShowNotification == true)
{
    <Notifications notificationType=@notificationType NotificationMessage=@notificationMessage closeNotification=@CloseNotification style="z-index:20" />
}

@if (ShowValidationPanel == false)
{
    <FocusPanel style="@style">
        <Component>
            <PanelComponent Id="auth_panel" style="padding:0px 0px calc(2px + 0.5vw) 0px; margin-top: calc(50px + 5vw)">
                <Component>
                    <div style="display: flex; flex-direction:row-reverse">
                        <button class="close_button" style="padding: 3px" @onclick=Close>
                            <img src="./images/close_button.webp" style="height:25px;" />
                        </button>
                    </div>

                    <InputSection smallInputFont="true" style="margin: 0px calc(30px + 0.5vw) 0px calc(30px + 0.5vw)" inputValue="OnInput" inputSectionTitle="" placeholder="New password"  isPassword="true" autocompleteOff="true" input_with_button="false" />

                    <div style="display: flex; flex-direction: column">
                        <button class="profile_function profile_function_upload" style="margin-top: 20px" @onclick=UpdatePassword>
                            Change password
                        </button>

                        @if (only_update_password == false)
                        {
                            <button class="profile_function profile_function_delete" style="margin-top: 10px; margin-bottom:5px" @onclick="DeleteAccount">
                                Delete account
                            </button>
                        }
                    </div>
                </Component>
            </PanelComponent>
        </Component>
    </FocusPanel>
}
else
{
    <ValidationPanel closeAccountValidationPanel="CloseValidationPanel" initiateValidationProcedure="ValidationProcedure" validationType=@validationType validationInputTopic=@validationInputTopic placeholder=@placeholder />
}



@code {
    private System.Timers.Timer? timer { get; set; }

    [Parameter] public string? Email { get; set; }

    [Parameter] public bool use_key_validation { get; set; }

    [Parameter] public bool only_update_password { get; set; }

    [Parameter] public string? style { get; set; }
    public delegate void ClosePanel();
    [Parameter] public ClosePanel? closePanel { get; set; }
    private string? email { get; set; }
    private string? password { get; set; }

    private ValidationPanel.ValidationType validationType { get; set; } = ValidationPanel.ValidationType.DeleteAccount;
    private string? validationInputTopic { get; set; }
    private string? placeholder { get; set; }

    private bool ShowValidationPanel { get; set; }
    private bool ShowNotification { get; set; }

    private Notifications.NotificationType notificationType { get; set; }
    private string? notificationMessage { get; set; }
    private DateTime start { get; set; }
    private bool OperationOnClose;
    private bool Loaded { get; set; }
    private bool Init { get; set; }

    private enum OnCloseOperation
    {
        NavigateToLogInPage,
        OpenValidationPanel
    }

    private OnCloseOperation operation { get; set; }

    public void Close() => closePanel?.Invoke();

    private async Task<string?> GetCache()
    {
        string? log_in_session_key = null;
        if(Loaded == true)
        {
            if (Shared.configurations?.use_secure_local_storage == true)
            {
                ProtectedBrowserStorageResult<string> log_in_session_key_result = await protectedLocalStorage.GetAsync<string>("AuthCache");
                log_in_session_key = log_in_session_key_result.Value;
            }
            else
            {
                IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                await module.DisposeAsync();
            }
        }
        return log_in_session_key;
    }


    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender == true)
        {
            Loaded = true;
            StateHasChanged();
        }

        if(Loaded == true && Init == false)
        {
            Init = true;
            Initialise();
        }
    }

    private async void Initialise()
    {
        try
        {
            if (Loaded == true)
            {
                timer?.Dispose();

                if (use_key_validation == true)
                {
                    string? log_in_session_key = await GetCache();

                    using (HttpClient client = clientFactory.CreateClient(Shared.HttpClientConfig))
                    {
                        client.BaseAddress = new Uri(NavigationManager.BaseUri);
                        HttpResponseMessage responseMessage = await client.GetAsync(new StringBuilder("/authentication/get-info?").Append("value=").Append(System.Net.WebUtility.UrlEncode(log_in_session_key)).ToString());
                        PayloadModel? response = await responseMessage.Content.ReadAsAsync<PayloadModel>();

                        if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            if (response.StatusCode == System.Net.HttpStatusCode.OK && response.result.Contains("Log in session approved") == true)
                            {
                                email = (string)response.payload;
                            }
                            else
                            {
                                notificationMessage = response.result;

                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = true;
                                ShowNotification = true;

                                timer = new System.Timers.Timer();
                                timer.Interval = 100;
                                timer.Elapsed += Elapased;
                                timer.Start();
                            }
                        }
                        else
                        {
                            if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                OperationOnClose = true;
                            }

                            ShowNotification = true;
                            notificationType = Notifications.NotificationType.Error;

                            if (response.result != null)
                                notificationMessage = response.result;
                            else
                                notificationMessage = "Internal server error";

                            timer = new System.Timers.Timer();
                            timer.Interval = 100;
                            timer.Elapsed += Elapased;
                            timer.Start();
                        }
                    }
                }
                else
                {
                    email = Email;
                }

                StateHasChanged();
            }
        }
        catch{}
    }

    public void OnInput(string? _password)
    {
        if (Loaded == true)
            password = _password;
    }

    public async void UpdatePassword()
    {
        try
        {
            if (Loaded == true)
            {
                validationType = ValidationPanel.ValidationType.UpdatePassword;
                validationInputTopic = "Password update";
                placeholder = "Password update code";

                string? log_in_session_key = await GetCache();

                PasswordUpdateModel passwordUpdate = new PasswordUpdateModel()
                {
                    email = this.email,
                    new_password = password
                };

                string query = await QueryParser.QueryParsing.QueryParser(passwordUpdate);


                using (HttpClient client = clientFactory.CreateClient(Shared.HttpClientConfig))
                {
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);
                    HttpResponseMessage responseMessage = await client.PutAsync(new StringBuilder("/authentication/update?").Append(query).ToString(), null);
                    PayloadModel? response = await responseMessage.Content.ReadAsAsync<PayloadModel>();
                    if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
                    {
                        if (response.StatusCode == System.Net.HttpStatusCode.OK && response.result.Contains("Password update successful") == true)
                        {
                            operation = OnCloseOperation.NavigateToLogInPage;
                            notificationType = Notifications.NotificationType.Information;
                            OperationOnClose = true;
                        }
                        else
                        {
                            if (response.result.Contains("Internal server error") == true)
                            {
                                notificationType = Notifications.NotificationType.Error;
                            }
                            else if (response.result.Contains("Invalid password") == true)
                            {
                                notificationType = Notifications.NotificationType.Error;
                            }
                            else if (response.result.Contains("Invalid email") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = true;
                            }
                            else if (response.result.Contains("Account does not exists") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = true;
                            }
                            else if (response.result.Contains("Check the code sent to your email to approve the password change") == true)
                            {
                                operation = OnCloseOperation.OpenValidationPanel;
                                notificationType = Notifications.NotificationType.Information;
                                OperationOnClose = true;
                            }
                            else if (response.result.Contains("Password less than 100 characters") == true)
                            {
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = false;
                            }
                            else if (response.result.Contains("Password more than 100 characters") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                OperationOnClose = false;
                            }
                        }

                        notificationMessage = response.result;
                    }
                    else
                    {
                        if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                        {
                            operation = OnCloseOperation.NavigateToLogInPage;
                            OperationOnClose = true;
                        }

                        notificationType = Notifications.NotificationType.Error;
                        if (response.result != null)
                            notificationMessage = response.result;
                        else
                            notificationMessage = "Internal server error";
                    }

                    start = DateTime.UtcNow;

                    timer = new System.Timers.Timer();
                    timer.Interval = 100;
                    timer.Elapsed += Elapased;
                    timer.Start();

                    ShowNotification = true;
                    StateHasChanged();
                }
            }
        }
        catch{}
    }

    public async void DeleteAccount()
    {
        try
        {
            if (Loaded == true)
            {
                validationType = ValidationPanel.ValidationType.DeleteAccount;
                validationInputTopic = "Account deletion";
                placeholder = "Account deletion code";

                string? log_in_session_key = await GetCache();

                using (HttpClient client = clientFactory.CreateClient(Shared.HttpClientConfig))
                {
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);
                    HttpResponseMessage responseMessage = await client.DeleteAsync(new StringBuilder("/authentication/delete?").Append("value=").Append(System.Net.WebUtility.UrlEncode(log_in_session_key)).ToString());
                    PayloadModel? response = await responseMessage.Content.ReadAsAsync<PayloadModel>();

                    if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
                    {
                        if (response.StatusCode == System.Net.HttpStatusCode.OK && response.result.Contains("Account deletion successful") == true)
                        {
                            operation = OnCloseOperation.NavigateToLogInPage;
                            notificationType = Notifications.NotificationType.Information;
                            OperationOnClose = true;
                        }
                        else
                        {
                            if (response.result.Contains("Internal server error") == true)
                            {
                                notificationType = Notifications.NotificationType.Error;
                            }
                            else if (response.result.Contains("Invalid log in session key") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = true;
                            }
                            else if (response.result.Contains("Invalid log in session key") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = true;
                            }
                            else if (response.result.Contains("Log in session not approved") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = true;
                            }
                            else if (response.result.Contains("Account does not exists") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Error;
                                OperationOnClose = true;
                            }
                            else if (response.result.Contains("Check the code sent to your email to approve the account deletion") == true)
                            {
                                operation = OnCloseOperation.OpenValidationPanel;
                                notificationType = Notifications.NotificationType.Information;
                                OperationOnClose = true;
                            }
                        }

                        notificationMessage = response.result;
                    }
                    else
                    {
                        if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                        {
                            operation = OnCloseOperation.NavigateToLogInPage;
                            OperationOnClose = true;
                        }

                        notificationType = Notifications.NotificationType.Error;
                        if (response.result != null)
                            notificationMessage = response.result;
                        else
                            notificationMessage = "Internal server error";
                    }

                    start = DateTime.UtcNow;

                    timer = new System.Timers.Timer();
                    timer.Interval = 100;
                    timer.Elapsed += Elapased;
                    timer.Start();

                    ShowNotification = true;
                    StateHasChanged();
                }
            }
        }
        catch{}
    }

    private void Elapased(object? obj, System.Timers.ElapsedEventArgs args)
    {
        if ((DateTime.UtcNow - start).TotalSeconds >= 7)
        {
            ((System.Timers.Timer?)obj)?.Dispose();
            CloseNotification();
        }
    }

    private void CloseValidationPanel()
    {
        if (Loaded == true)
        {
            ShowNotification = false;
            ShowValidationPanel = false;
            StateHasChanged();
        }
    }

    private async void ValidationProcedure(string? code, ValidationPanel.ValidationType validationType)
    {
        try
        {
            if (Loaded == true)
            {
                using(HttpClient client = clientFactory.CreateClient(Shared.HttpClientConfig))
                {
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);

                    if (validationType == ValidationPanel.ValidationType.DeleteAccount)
                    {
                        HttpResponseMessage responseMessage = await client.DeleteAsync(new StringBuilder("/validation/delete-account?").Append("value=").Append(System.Net.WebUtility.UrlEncode(code)).ToString());
                        PayloadModel? response = await responseMessage.Content.ReadAsAsync<PayloadModel>();

                        if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            if (response.StatusCode == System.Net.HttpStatusCode.OK && response.result.Contains("Account deletion successful") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Information;
                                OperationOnClose = true;
                                ShowValidationPanel = false;
                            }
                            else
                            {
                                if (response.result.Contains("Internal server error") == true)
                                {
                                    notificationType = Notifications.NotificationType.Error;
                                }
                                else if (response.result.Contains("Account does not exists") == true)
                                {
                                    operation = OnCloseOperation.NavigateToLogInPage;
                                    notificationType = Notifications.NotificationType.Error;
                                    OperationOnClose = true;
                                    ShowValidationPanel = false;
                                }
                                else if (response.result.Contains("Invalid code") == true)
                                {
                                    notificationType = Notifications.NotificationType.Error;
                                }
                                else if (response.result.Contains("Account deletion code expired") == true)
                                {
                                    notificationType = Notifications.NotificationType.Error;
                                    ShowValidationPanel = false;
                                }
                                else if (response.result.Contains("Invalid log in session key") == true)
                                {
                                    operation = OnCloseOperation.NavigateToLogInPage;
                                    notificationType = Notifications.NotificationType.Error;
                                    OperationOnClose = true;
                                    ShowValidationPanel = false;
                                }
                            }

                            notificationMessage = response.result;
                        }
                        else
                        {
                            if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                OperationOnClose = true;
                                ShowValidationPanel = false;
                            }

                            notificationType = Notifications.NotificationType.Error;
                            if (response.result != null)
                                notificationMessage = response.result;
                            else
                                notificationMessage = "Internal server error";
                        }

                    }
                    else if (validationType == ValidationPanel.ValidationType.UpdatePassword)
                    {
                        PasswordUpdateValidationModel model = new PasswordUpdateValidationModel()
                            {
                                code = code,
                                new_password = password
                            };

                        string? query = await QueryParser.QueryParsing.QueryParser(model);

                        HttpResponseMessage responseMessage = await client.PutAsync(new StringBuilder("/validation/update-account?").Append(query).ToString(), null);
                        PayloadModel? response = await responseMessage.Content.ReadAsAsync<PayloadModel>();

                        if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            if (response.StatusCode == System.Net.HttpStatusCode.OK && response.result.Contains("Password update successful") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                notificationType = Notifications.NotificationType.Information;
                                OperationOnClose = true;
                            }
                            else
                            {
                                if (response.result.Contains("Internal server error") == true)
                                {
                                    notificationType = Notifications.NotificationType.Error;
                                }
                                else if (response.result.Contains("Invalid password") == true)
                                {
                                    notificationType = Notifications.NotificationType.Error;
                                }
                                else if (response.result.Contains("Invalid email") == true)
                                {
                                    operation = OnCloseOperation.NavigateToLogInPage;
                                    notificationType = Notifications.NotificationType.Error;
                                    OperationOnClose = true;
                                }
                                else if (response.result.Contains("Account does not exists") == true)
                                {
                                    operation = OnCloseOperation.NavigateToLogInPage;
                                    notificationType = Notifications.NotificationType.Error;
                                    OperationOnClose = true;
                                }
                                else if (response.result.Contains("Password update code expired") == true)
                                {
                                    operation = OnCloseOperation.NavigateToLogInPage;
                                    notificationType = Notifications.NotificationType.Error;
                                    OperationOnClose = true;
                                }
                                else
                                {
                                    notificationMessage = "Internal server error";
                                }
                            }

                            notificationMessage = response.result;
                        }
                        else
                        {
                            if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                            {
                                operation = OnCloseOperation.NavigateToLogInPage;
                                OperationOnClose = true;
                            }

                            notificationType = Notifications.NotificationType.Error;
                            if (response.result != null)
                                notificationMessage = response.result;
                            else
                                notificationMessage = "Internal server error";
                        }
                    }

                    start = DateTime.UtcNow;

                    timer = new System.Timers.Timer();
                    timer.Interval = 100;
                    timer.Elapsed += Elapased;
                    timer.Start();

                    ShowNotification = true;
                    StateHasChanged();
                }
            }
        }
        catch{}
    }

    private async void CloseNotification()
    {
        try
        {
            if (Loaded == true)
            {
                await InvokeAsync(async () =>
                {
                    if (OperationOnClose == true)
                    {
                        switch (operation)
                        {
                            case OnCloseOperation.NavigateToLogInPage:
                                IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "././js/functions.js");

                                if (Shared.configurations?.use_secure_local_storage == true)
                                {
                                    await protectedLocalStorage.DeleteAsync("AuthCache");
                                }
                                else
                                {
                                    await module.InvokeVoidAsync("Delete_Cache", "auth", "AuthCache");
                                }

                                NavigationManager.NavigateTo("/log-in", true);
                                break;
                            case OnCloseOperation.OpenValidationPanel:
                                ShowValidationPanel = true;
                                break;
                        }

                        OperationOnClose = false;
                    }
                    ShowNotification = false;
                    StateHasChanged();
                });
            }
        }
        catch { }
    }
}
