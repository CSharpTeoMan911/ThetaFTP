@using System.Net.Http.Headers
@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared.Formatters;
@using ThetaFTP.Shared.Classes;
@using System.Text;
@using ThetaFTP.Shared.Models;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;
@page "/"


<PanelComponent>
    <Component>
        @if (ShowNotification == true)
        {
            <Notifications notificationType=@notificationType NotificationMessage=@notificationMessage closeNotification=@CloseNotification/>
        }
        @if(ShowValidationPanel == true)
        {
            <ValidationPanel closeAccountValidationPanel="CloseValidationPanel" initiateValidationProcedure="ValidationProcedure" validationType=@validationType validationInputTopic=@validationInputTopic placeholder=@placeholder defaultValue=@defaultValue/>
        }
        <div class="files_panel">
            <div class="files_panel_control ">
                <div style="display:inline-block; width:100%;">
                    <div class="panel_control_section">
                        <div class="files_panel_file_options">
                            <button class="control_button" style="margin-left: 20px" onclick="document.getElementById('file_dialog').click()">
                                <img class="control_image" src="./images/cloud-computing.webp" />
                                <InputFile id="file_dialog" OnChange="@Upload" hidden/>
                            </button>
                            <button class="control_button" style="margin-left: 40px" @onclick=CreateDirectory>
                                <img class="control_image" src="./images/new-folder.webp" />
                            </button>
                        </div>
                    </div>

                    <div class="panel_control_section">
                        <div class="files_panel_file_search">
                            <div class="files_panel_file_search_control">
                                <input style="margin-left: 20px"  placeholder="Search" />
                                <button class="control_button" @onclick=Search>
                                    <img class="control_image" src="./images/search.webp" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
           </div>
            <div class="path_display">
                <p class="path_label">
                    Path
                </p>
                <input class="path_input" />
            </div>
        </div>
    </Component>
</PanelComponent>


@code{
    private string? Path { get; set; } = "/";
    private string? DirectoryName { get; set; }
    private bool ShowValidationPanel { get; set; }
    private bool ShowNotification { get; set; }
    private bool InvalidLogInSessionKey { get; set; }

    private ValidationPanel.ValidationType validationType { get; set; }
    private string? validationInputTopic { get; set; }
    private string? placeholder { get; set; }
    private string? defaultValue { get; set; }

    private Notifications.NotificationType notificationType { get; set; }
    private string? notificationMessage { get; set; }



    public async void Upload(InputFileChangeEventArgs e)
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
            string log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");


            Tuple<string, Stream, StreamContent?> payload =  await FileUploadPayloadBuilder.FileUpload(e.File, Path, log_in_session_key);

            if (payload.Item3 != null)
            {
                try
                {
                    HttpClient client = HttpClientGen.Generate();
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);

                    HttpResponseMessage responseMessage = await client.PostAsync(payload.Item1, payload.Item3);
                    string response = await responseMessage.Content.ReadAsStringAsync();
                    notificationMessage = response;

                    if (response.Contains("File upload successful") == true)
                    {
                        notificationType = Notifications.NotificationType.Information;
                    }
                    else if (response.Contains("Log in session key expired") == true || response.Contains("Log in session not approved") == true || response.Contains("Log in session not approved") == true || response.Contains("Invalid log in session key") == true)
                    {
                        notificationType = Notifications.NotificationType.Error;
                        InvalidLogInSessionKey = true;
                    }
                    else
                    {
                        notificationType = Notifications.NotificationType.Error;
                    }
                }
                catch
                {
                    notificationMessage = "Could not upload file";
                    notificationType = Notifications.NotificationType.Error;
                }
                finally
                {
                    await payload.Item2.DisposeAsync();
                }
            }
            else
            {
                notificationMessage = "Could not read file";
                notificationType = Notifications.NotificationType.Error;
            }

            ShowNotification = true;
            StateHasChanged();
        }
        catch(Exception E)
        {
            System.Diagnostics.Debug.WriteLine(E.Message);
            notificationMessage = "Could not upload file";
            notificationType = Notifications.NotificationType.Error;
        }
    }

    public void CreateDirectory()
    {
        validationType = ValidationPanel.ValidationType.DirectoryName;
        validationInputTopic = "Directory";
        placeholder = "Directory name";
        ShowValidationPanel = true;
        StateHasChanged();
    }

    private void CloseValidationPanel()
    {
        ShowValidationPanel = false;
        StateHasChanged();
    }

    private async void ValidationProcedure(string? code, ValidationPanel.ValidationType validationType)
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
            string log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

            HttpClient client = HttpClientGen.Generate();
            try
            {
                client.BaseAddress = new Uri(NavigationManager.BaseUri);

                if (validationType == ValidationPanel.ValidationType.DirectoryName)
                {

                    HttpResponseMessage responseMessage = await client.PostAsync(await DirectoryUploadPayloadBuilder.DirectoryUpload(code, Path, log_in_session_key), null);
                    string response = await responseMessage.Content.ReadAsStringAsync();
                    notificationMessage = response;

                    if (response.Contains("Directory upload successful") == true)
                    {
                        notificationType = Notifications.NotificationType.Information;
                    }
                    else if (response.Contains("Log in session key expired") == true || response.Contains("Log in session not approved") == true || response.Contains("Log in session not approved") == true || response.Contains("Invalid log in session key") == true)
                    {
                        notificationType = Notifications.NotificationType.Error;
                        InvalidLogInSessionKey = true;
                    }
                    else
                    {
                        notificationType = Notifications.NotificationType.Error;
                    }
                }
            }
            finally
            {
                client.Dispose();
            }
        }
        catch{}

        ShowValidationPanel = false;
        ShowNotification = true;
        StateHasChanged();
    }

    private async void CloseNotification()
    {
        ShowNotification = false;
        if (InvalidLogInSessionKey == true)
        {
            Console.WriteLine("Log out");
            await LogOut();
            NavigationManager.NavigateTo("/log-in", true);
        }
        else
        {
            StateHasChanged();
        }
    }

    public void Search()
    {

    }

    private async Task LogOut()
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "././js/functions.js");

            string? key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

            StringBuilder builder = new StringBuilder("/validation/delete-session?value=");
            builder.Append(System.Web.HttpUtility.UrlEncode(key));

            HttpClient client = HttpClientGen.Generate();
            client.BaseAddress = new Uri(NavigationManager.BaseUri);
            HttpResponseMessage responseMessage = await client.DeleteAsync(builder.ToString());

            await module.InvokeVoidAsync("Delete_Cache", "auth", "AuthCache");
        }
        catch { }
    }
}