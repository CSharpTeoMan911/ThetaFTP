@using System.Net.Http.Headers
@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared.Formatters;
@using ThetaFTP.Shared.Classes;
@using System.Text;
@using ThetaFTP.Shared.Models;
@using System.Collections.Concurrent;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;
@page "/"


<PanelComponent Id="index_panel">
    <Component>
        @if (ShowNotification == true)
        {
            <Notifications notificationType=@notificationType NotificationMessage=@notificationMessage closeNotification=@CloseNotification/>
        }
        @if(ShowValidationPanel == true)
        {
            <ValidationPanel closeAccountValidationPanel="CloseValidationPanel" initiateValidationProcedure="ValidationProcedure" validationType=@validationType validationInputTopic=@validationInputTopic placeholder=@placeholder defaultValue=@defaultValue/>
        }
        <div id="index_panel_inner" class="files_panel">
            <div class="files_panel_control ">
                <div style="display:inline-block; width:100%;">
                    <div class="panel_control_section">


                        <div class="files_panel_file_options">

                            <FilterPanel sortedItems="new FilterPanel.SortedItems(Sort)"/>

                            @if (DownloadInProgress == true)
                            {
                                <DropdownMenu operation="DropdownMenu.Operation.download">
                                    <Content>
                                        @for (int i = 0; i < pending_download_progress_data.Count; i++)
                                        {
                                            string? progress = null;
                                            string? file_name = pending_download_progress_data.Keys.ElementAt(i);

                                            Tuple<string, CancellationTokenSource>? item = null;
                                            pending_download_progress_data.TryGetValue(file_name, out item);

                                            <DropDownMenuItem file_name=@file_name progress=@item?.Item1 source=@item?.Item2 />
                                        }
                                    </Content>
                                </DropdownMenu>
                            }

                            @if (UploadInProgress == true)
                            {
                                <DropdownMenu operation="DropdownMenu.Operation.upload">
                                    <Content>
                                        @for (int i = 0; i < pending_upload_progress_data.Count; i++)
                                        {
                                            string? progress = null;
                                            string? file_name = pending_upload_progress_data.Keys.ElementAt(i);

                                            Tuple<string, CancellationTokenSource>? item = null;
                                            pending_upload_progress_data.TryGetValue(file_name, out item);

                                            <DropDownMenuItem file_name=@file_name progress=@item?.Item1 source =@item?.Item2 />
                                        }
                                    </Content>
                                </DropdownMenu>
                            }

                            <button class="control_button" style="margin-left: 30px" onclick="document.getElementById('file_dialog').click()">
                                <img class="control_image" src="./images/cloud-computing.webp" />
                                <InputFile id="file_dialog" OnChange="@Upload" hidden/>
                            </button>
                            <button class="control_button" style="margin-left: 30px" @onclick=CreateDirectory>
                                <img class="control_image" src="./images/new-folder.webp" />
                            </button>
                        </div>
                    </div>

                    <div class="panel_control_section">
                        <div class="files_panel_file_search">
                            <div class="files_panel_file_search_control">
                                <input style="margin-left: 20px"  placeholder="Search" />
                                <button class="control_button" @onclick=Search>
                                    <img class="control_image" src="./images/search.webp" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
           </div>


            <div class="directory_file_items">
                <div style="width:100%; height:fit-content; display:flex; flex-direction:column;">
                    @for (int i = 0; i < items.Count; i++)
                    {
                        <DirectoryItemComponent directoryItem="@items.ElementAt(i)"/>
                    }
                </div>
            </div>
@*             <div class="path_display">
                <p class="path_label">
                    Path
                </p>
                <input class="path_input" />
            </div> *@

        </div>
    </Component>
</PanelComponent>


@code{
    private string? Path { get; set; } = "/";
    private string? DirectoryName { get; set; }
    private bool ShowValidationPanel { get; set; }
    private bool ShowNotification { get; set; }
    private bool InvalidLogInSessionKey { get; set; }

    private bool UploadInProgress { get; set; }
    private bool DownloadInProgress { get; set; }

    private ValidationPanel.ValidationType validationType { get; set; }
    private string? validationInputTopic { get; set; }
    private string? placeholder { get; set; }
    private string? defaultValue { get; set; }

    private Notifications.NotificationType notificationType { get; set; }
    private string? notificationMessage { get; set; }

    private FilterPanel.Order order { get; set; }
    private FilterPanel.Type type { get; set; }

    private ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>> pending_upload_progress_data = new ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>>();

    private ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>> pending_download_progress_data = new ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>>();

    private List<DirectoryItem> items = new List<DirectoryItem>();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender == true)
        {
            GetDirectoryInfo();
        }
    }

    public async void GetDirectoryInfo()
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
            string log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

            Metadata metadata = new Metadata();
            metadata.path = Path;
            metadata.key = log_in_session_key;

            StringBuilder url_builder = new StringBuilder("/files/get-files?");
            url_builder.Append(await QueryParsing.QueryParser(metadata));

            HttpClient client = HttpClientGen.Generate();
            client.BaseAddress = new Uri(NavigationManager.BaseUri);

            HttpResponseMessage result = await client.GetAsync(url_builder.ToString());
            string result_string = await result.Content.ReadAsStringAsync();

            if (result_string == "Invalid log in session key" || result_string == "Log in session key expired" || result_string == "Log in session not approved" || result_string == "Invalid file path" || result_string == "Internal server error")
            {
                ShowNotification = true;
                notificationMessage = result_string;
                notificationType = Notifications.NotificationType.Error;
            }
            else
            {
                List<DirectoryItem>? files = await JsonFormatter.JsonDeserialiser<List<DirectoryItem>>(result_string);

                if (files != null)
                {
                    url_builder.Clear();
                    url_builder.Append("/directories/get-directories?").Append(await QueryParsing.QueryParser(metadata));

                    result = await client.GetAsync(url_builder.ToString());
                    result_string = await result.Content.ReadAsStringAsync();

                    if (result_string == "Invalid log in session key" || result_string == "Log in session key expired" || result_string == "Log in session not approved" || result_string == "Invalid file path" || result_string == "Internal server error")
                    {
                        ShowNotification = true;
                        notificationMessage = result_string;
                        notificationType = Notifications.NotificationType.Error;
                    }
                    else
                    {
                        List<DirectoryItem>? directories = await JsonFormatter.JsonDeserialiser<List<DirectoryItem>>(result_string);

                        if (directories != null)
                        {
                            files.AddRange(directories);
                            items = files;

                            bool ascending = false;

                            if (order == FilterPanel.Order.up)
                                ascending = true;

                            switch (type)
                            {
                                case FilterPanel.Type.Name:
                                    MergeSortByName(items, ascending);
                                    break;
                                case FilterPanel.Type.Size:
                                    MergeSortBySize(items, ascending);
                                    break;
                            }
                        }
                        else
                        {
                            ShowNotification = true;
                            notificationMessage = "Internal server error";
                            notificationType = Notifications.NotificationType.Error;
                        }
                    }
                }
                else
                {
                    ShowNotification = true;
                    notificationMessage = "Internal server error";
                    notificationType = Notifications.NotificationType.Error;
                }

                Console.WriteLine($"result: {result_string}");
            }

            await module.DisposeAsync();
        }
        catch
        {

        }

        StateHasChanged();
    }

    public async void Upload(InputFileChangeEventArgs e)
    {

        System.Timers.Timer timer = new System.Timers.Timer();
        try
        {

            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
            string log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

            Tuple<string, Stream, StreamContent?> payload =  await FileUploadPayloadBuilder.FileUpload(e.File, Path, log_in_session_key);

            if (payload.Item3 != null)
            {
                CancellationTokenSource source = new CancellationTokenSource();
                CancellationToken token = source.Token;

                try
                {
                    UploadInProgress = true;
                    double progress = 0;

                    HttpClient client = client = HttpClientGen.Generate();
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);

                    pending_upload_progress_data.TryAdd(e.File.Name, new Tuple<string, CancellationTokenSource>("0", source));

                    timer.Elapsed += async (object? sender, System.Timers.ElapsedEventArgs args) =>
                    {
                        if (token.IsCancellationRequested == false)
                        {
                            long file_size = payload.Item2.Length;
                            long position = payload.Item2.Position + 1;
                            double difference = 0;

                            if (position != 0)
                                difference = file_size / position;
                            if (difference != 0)
                                progress = 100 / (difference);


                            Tuple<string, CancellationTokenSource>? previous_value = null;
                            pending_upload_progress_data.TryGetValue(e.File.Name, out previous_value);

                            if (previous_value != null)
                                pending_upload_progress_data.TryUpdate(e.File.Name, new Tuple<string, CancellationTokenSource>(progress.ToString("F2"), source), previous_value);

                            await InvokeAsync(() =>
                            {
                                StateHasChanged();
                            });
                        }
                        else
                        {
                            pending_upload_progress_data.Remove(e.File.Name, out _);
                            pending_upload_progress_data.Remove(e.File.Name, out _);
                            timer.Dispose();

                            await InvokeAsync(() =>
                            {
                                if (pending_upload_progress_data.Count == 0)
                                    UploadInProgress = false;
                                StateHasChanged();
                            });

                            client.CancelPendingRequests();
                        }
                    };
                    timer.Interval = 500;
                    timer.Start();

                    HttpResponseMessage responseMessage = await client.PostAsync(payload.Item1, payload.Item3);
                    string response = await responseMessage.Content.ReadAsStringAsync();

                    pending_upload_progress_data.Remove(e.File.Name, out _);
                    pending_upload_progress_data.Remove(e.File.Name, out _);
                    timer?.Dispose();

                    if (response.Contains("File upload successful") == true)
                    {
                        notificationType = Notifications.NotificationType.Information;
                    }
                    else if (response.Contains("Log in session key expired") == true || response.Contains("Log in session not approved") == true || response.Contains("Log in session not approved") == true || response.Contains("Invalid log in session key") == true)
                    {
                        notificationType = Notifications.NotificationType.Error;
                        InvalidLogInSessionKey = true;
                    }
                    else
                    {
                        notificationType = Notifications.NotificationType.Error;
                    }

                    notificationMessage = response;
                }
                catch (Exception E)
                {
                    pending_upload_progress_data.Remove(e.File.Name, out _);
                    pending_upload_progress_data.Remove(e.File.Name, out _);
                    timer.Dispose();

                    if (E.Message.Contains("The operation was canceled") == false)
                    {
                        notificationType = Notifications.NotificationType.Error;
                        notificationMessage = "Could not upload file";
                    }
                    else
                    {
                        goto DoNotRenderNotification;
                    }
                }
                finally
                {
                    await payload.Item2.DisposeAsync();
                }
            }
            else
            {
                pending_upload_progress_data.Remove(e.File.Name, out _);
                pending_upload_progress_data.Remove(e.File.Name, out _);
                timer.Dispose();

                notificationType = Notifications.NotificationType.Error;
                notificationMessage = "Could not read file";
            }

            await module.DisposeAsync();

            if (pending_upload_progress_data.Count == 0)
                UploadInProgress = false;

            ShowNotification = true;
            StateHasChanged();
        DoNotRenderNotification:;
        }
        catch
        {
            pending_upload_progress_data.Remove(e.File.Name, out _);
            pending_upload_progress_data.Remove(e.File.Name, out _);
            timer.Dispose();

            if (pending_upload_progress_data.Count == 0)
                UploadInProgress = false;

            StateHasChanged();

            notificationType = Notifications.NotificationType.Error;
            notificationMessage = "Could not upload file";
        }
    }

    public void CreateDirectory()
    {
        validationType = ValidationPanel.ValidationType.DirectoryName;
        validationInputTopic = "Directory";
        placeholder = "Directory name";
        ShowValidationPanel = true;
        StateHasChanged();
    }

    private void CloseValidationPanel()
    {
        ShowValidationPanel = false;
        StateHasChanged();
    }

    private async void ValidationProcedure(string? code, ValidationPanel.ValidationType validationType)
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
            string log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

            HttpClient client = HttpClientGen.Generate();
            try
            {
                client.BaseAddress = new Uri(NavigationManager.BaseUri);

                if (validationType == ValidationPanel.ValidationType.DirectoryName)
                {

                    HttpResponseMessage responseMessage = await client.PostAsync(await DirectoryUploadPayloadBuilder.DirectoryUpload(code, Path, log_in_session_key), null);
                    string response = await responseMessage.Content.ReadAsStringAsync();
                    notificationMessage = response;

                    if (response.Contains("Directory upload successful") == true)
                    {
                        notificationType = Notifications.NotificationType.Information;
                    }
                    else if (response.Contains("Log in session key expired") == true || response.Contains("Log in session not approved") == true || response.Contains("Log in session not approved") == true || response.Contains("Invalid log in session key") == true)
                    {
                        notificationType = Notifications.NotificationType.Error;
                        InvalidLogInSessionKey = true;
                    }
                    else
                    {
                        notificationType = Notifications.NotificationType.Error;
                    }
                }
            }
            finally
            {
                client.Dispose();
            }

            await module.DisposeAsync();
        }
        catch{}

        ShowValidationPanel = false;
        ShowNotification = true;
        StateHasChanged();
    }

    private async void CloseNotification()
    {
        ShowNotification = false;
        if (InvalidLogInSessionKey == true)
        {
            await LogOut();
            NavigationManager.NavigateTo("/log-in", true);
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task LogOut()
    {
        try
        {
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "././js/functions.js");

            string? key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");

            StringBuilder builder = new StringBuilder("/validation/delete-session?value=");
            builder.Append(System.Web.HttpUtility.UrlEncode(key));

            HttpClient client = HttpClientGen.Generate();
            client.BaseAddress = new Uri(NavigationManager.BaseUri);
            HttpResponseMessage responseMessage = await client.DeleteAsync(builder.ToString());

            await module.InvokeVoidAsync("Delete_Cache", "auth", "AuthCache");

            await module.DisposeAsync();
        }
        catch { }
    }

    public void Sort(FilterPanel.Order order_, FilterPanel.Type type_)
    {
        order = order_;
        type = type_;
        GetDirectoryInfo();
    }

    public void MergeSortByName(List<DirectoryItem> items, bool ascending)
    {
        
    }

    public void MergeSortBySize(List<DirectoryItem> items, bool ascending)
    {

    }

    public void Search()
    {

    }
}