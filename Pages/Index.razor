@using System.Net.Http.Headers
@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared.Formatters;
@using ThetaFTP.Shared.Classes;
@using System.Text;
@using ThetaFTP.Shared.Models;
@using System.Collections.Concurrent;
@using ThetaFTP.Shared;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;
@inject IHttpClientFactory httpFactory;
@page "/";

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage protectedLocalStorage;


<PanelComponent Id="index_panel" style="background-color: rgb(255,255,255);">
    <Component>
        @if (ShowNotification == true)
        {
            <Notifications notificationType=@notificationType NotificationMessage=@notificationMessage closeNotification=@CloseNotification style="z-index:10"/>
        }
        @if(ShowValidationPanel == true)
        {
            <ValidationPanel closeAccountValidationPanel="CloseValidationPanel" initiateValidationProcedure="ValidationProcedure" validationType=@validationType validationInputTopic=@validationInputTopic placeholder=@placeholder defaultValue=@defaultValue/>
        }
        @if (ShowDirectoryItemDetails == true)
        {
            <DirectoryItemDetails directoryItem=@currentDirectoryItem closeDetails="CloseDetails"/>
        }
        @if (ShowFileManipulationPanel == true)
        {
            <FileManipulationPanel item=@currentDirectoryItem closePanel="CloseFileManipulationPanel" fileManipulation="ProcessFileManipulation" Path="@Path"/>
        }
        @if (ShowFileRelocationPanel == true)
        {
            <FileRelocationPanel selected_item="@currentDirectoryItem" closePanel="CloseFileRelocationPanel" Path="@Path"/>
        }
        <div id="index_panel_inner" class="files_panel">
            <div class="files_panel_control ">
                <div style="display:inline-block; width:100%;">
                    <div class="panel_control_section">


                        <div class="files_panel_file_options">

                            <FilterPanel sortedItems="new FilterPanel.SortedItems(Sort)"/>

                            @if (UploadInProgress == true)
                            {
                                <DropdownMenu operation="DropdownMenu.Operation.upload">
                                    <Content>
                                        @for (int i = 0; i < pending_upload_progress_data.Count; i++)
                                        {
                                            string? file_name = pending_upload_progress_data.Keys.ElementAt(i);

                                            Tuple<string, CancellationTokenSource>? item = null;
                                            pending_upload_progress_data.TryGetValue(file_name, out item);

                                            <DropDownMenuItem file_name=@file_name progress=@item?.Item1 source =@item?.Item2 />
                                        }
                                    </Content>
                                </DropdownMenu>
                            }

                            <button class="control_button" style="margin-left: 30px" onclick="document.getElementById('file_dialog').click()">
                                <img class="control_image" src="./images/cloud-computing.webp" />
                                <InputFile id="file_dialog" OnChange="@Upload" hidden/>
                            </button>
                            <button class="control_button" style="margin-left: 30px" @onclick=CreateDirectory>
                                <img class="control_image" src="./images/new-folder.webp" />
                            </button>
                        </div>
                    </div>

                    <div class="panel_control_section">
                        <div class="files_panel_file_search">
                            <div class="files_panel_file_search_control">
                                <button class="control_button">
                                    <img class="control_image" src="./images/update.webp" @onclick=ClearSearchFilter/>
                                </button>
                                <input style="margin-left: 10px" @oninput=OnChanged placeholder="Search" />
                                <button class="control_button" @onclick=Search>
                                    <img class="control_image" src="./images/search.webp" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div class="directory_file_items">
                <div style="width:100%; height:fit-content; display:flex; flex-direction:column;">
                    @if (ShowBackButton == true)
                    {
                        <div style="display: flex; position:sticky; top:0px; flex-direction:row; background-color:white; width: 100%; padding: 10px 5px 10px 5px; z-index: 2">
                            <div style="display: flex; align-self:center; align-content:center">
                                <button style="display: flex; align-self:center; align-content:center; border-color: transparent; background-color: transparent; margin-left: 12px" @onclick=Back>
                                    <img src="./images/left-arrow.webp" style="height: 15px; align-self:center" />
                                </button>
                                <p style="align-self:center; padding: 0px 0px 0px 0px; margin: 0px 0px 0px 20px">
                                    @last_dir
                                </p>
                            </div>
                        </div>
                        <div style="background-color: #bfbfbf; height:2px"> </div>
                    }
                    @if(items?.Count > 0)
                    {
                        <Virtualize Items="@items" Context="item">
                            <DirectoryItemComponent directoryItem="@item" operationDelegate=FileOperation />
                        </Virtualize>
                    }
                </div>
            </div>
        </div>
    </Component>
</PanelComponent>


@code{
    private string? last_dir { get; set; }
    private string? Path { get; set; } = "/";
    private string? DirectoryName { get; set; }
    private bool ShowValidationPanel { get; set; }
    private bool ShowNotification { get; set; }
    private bool ShowFileManipulationPanel { get; set; }
    private bool ShowBackButton{ get; set; }
    private bool InvalidLogInSessionKey { get; set; }

    private bool UploadInProgress { get; set; }

    private ValidationPanel.ValidationType validationType { get; set; }
    private string? validationInputTopic { get; set; }
    private string? placeholder { get; set; }
    private string? defaultValue { get; set; }

    private Notifications.NotificationType notificationType { get; set; }
    private string? notificationMessage { get; set; }

    private FilterPanel.Order order { get; set; }
    private FilterPanel.Type type { get; set; }

    private ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>> pending_upload_progress_data = new ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>>();

    private ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>> pending_download_progress_data = new ConcurrentDictionary<string, Tuple<string, CancellationTokenSource>>();

    private List<DirectoryItem>? items = new List<DirectoryItem>();

    private bool ShowDirectoryItemDetails { get; set; }
    private DirectoryItem? currentDirectoryItem { get; set; }

    private bool ShowFileRelocationPanel { get; set; }

    private string? SearchContent { get; set; }

    private bool SearchFilterEnabled { get; set; }

    private bool Loaded { get; set; }
    private bool Init { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender == true)
        {
            Loaded = true;
            StateHasChanged();
        }

        if(Init == false && Loaded == true)
        {
            Init = true;
            GetDirectoryInfo(true);
        }
    }

    private void OnChanged(ChangeEventArgs e)
    {
        SearchContent = e.Value.ToString();
        Search();
    }

    public async void GetDirectoryInfo(bool re_render)
    {
        if(Loaded == true)
        {
            try
            {
                Tuple<bool, string?> last_dir_ = await FileSystemFormatter.GetLastDir(Path);
                ShowBackButton = last_dir_.Item1;
                last_dir = last_dir_.Item2;

                if (ShowBackButton == true)
                    items?.Clear();

                string? log_in_session_key = null;

                if (Shared.configurations?.use_secure_local_storage == true)
                {
                    ProtectedBrowserStorageResult<string> log_in_session_key_result = await protectedLocalStorage.GetAsync<string>("AuthCache");
                    log_in_session_key = log_in_session_key_result.Value;
                }
                else
                {
                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                    log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    await module.DisposeAsync();
                }

                Metadata metadata = new Metadata();
                metadata.path = Path;
                metadata.key = log_in_session_key;

                StringBuilder url_builder = new StringBuilder("/files/get-files?");
                url_builder.Append(QueryParsing.QueryParser(metadata));

                using (HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig))
                {
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);


                    HttpResponseMessage result = await client.GetAsync(url_builder.ToString());
                    PayloadModel? response = await result.Content.ReadAsAsync<PayloadModel>();

                    if (result?.StatusCode == System.Net.HttpStatusCode.OK)
                    {
                        if (response?.StatusCode == System.Net.HttpStatusCode.OK && response?.result?.Contains("Files retrieval successful") == true)
                        {
                            List<DirectoryItem> files = ((Newtonsoft.Json.Linq.JArray)response.payload).ToObject<List<DirectoryItem>>();

                            url_builder.Clear();
                            url_builder.Append("/directories/get-directories?").Append(QueryParsing.QueryParser(metadata));

                            result = await client.GetAsync(url_builder.ToString());
                            response = await result.Content.ReadAsAsync<PayloadModel>();


                            if (response?.StatusCode == System.Net.HttpStatusCode.OK && response?.result?.Contains("Directories retrieval successful") == true)
                            {
                                List<DirectoryItem> directories = ((Newtonsoft.Json.Linq.JArray)response.payload).ToObject<List<DirectoryItem>>();

                                SortUtility sortUtility = new SortUtility();

                                files?.AddRange(directories);
                                items = files;

                                if (SearchFilterEnabled == true)
                                    items = await SearchFilter(items);

                                if (type == FilterPanel.Type.Name)
                                    sortUtility.MergeSortByName(items, order == FilterPanel.Order.up);
                                else
                                    sortUtility.MergeSortBySize(items, order == FilterPanel.Order.up);
                            }
                            else
                            {
                                InvalidLogInSessionKey = true;
                                ShowNotification = true;
                                notificationMessage = response.result;
                                notificationType = Notifications.NotificationType.Error;
                            }
                        }
                        else
                        {
                            InvalidLogInSessionKey = true;
                            ShowNotification = true;
                            notificationMessage = response.result;
                            notificationType = Notifications.NotificationType.Error;
                        }
                    }
                    else
                    {
                        InvalidLogInSessionKey = true;
                        ShowNotification = true;
                        notificationType = Notifications.NotificationType.Error;
                        if (response.result != null)
                            notificationMessage = response.result;
                        else
                            notificationMessage = "Internal server error";
                    }
                }
            }
            catch
            {
                InvalidLogInSessionKey = true;
                ShowNotification = true;
                notificationType = Notifications.NotificationType.Error;
                notificationMessage = "Internal server error";
            }

            if (re_render == true)
                StateHasChanged();
        }
    }

    public async void Upload(InputFileChangeEventArgs e)
    {
        if (Loaded == true)
        {
            bool allow_task_cancellation = true;

            System.Timers.Timer timer = new System.Timers.Timer();
            try
            {
                string? log_in_session_key = null;

                if (Shared.configurations?.use_secure_local_storage == true)
                {
                    ProtectedBrowserStorageResult<string> log_in_session_key_result = await protectedLocalStorage.GetAsync<string>("AuthCache");
                    log_in_session_key = log_in_session_key_result.Value;
                }
                else
                {
                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                    log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    await module.DisposeAsync();
                }

                Tuple<string, Stream, StreamContent?> payload = await FileUploadPayloadBuilder.FileUpload(e.File, Path, log_in_session_key);

                if (payload.Item3 != null)
                {
                    CancellationTokenSource source = new CancellationTokenSource();
                    CancellationToken token = source.Token;

                    try
                    {
                        UploadInProgress = true;
                        double progress = 0;

                        using (HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig))
                        {
                            client.BaseAddress = new Uri(NavigationManager.BaseUri);

                            pending_upload_progress_data.TryAdd(e.File.Name, new Tuple<string, CancellationTokenSource>("0", source));



                            timer.Elapsed += async (object? sender, System.Timers.ElapsedEventArgs args) =>
                            {
                                try
                                {
                                    if (token.IsCancellationRequested == false)
                                    {
                                        long file_size = payload.Item2.Length;
                                        long position = payload.Item2.Position + 1;
                                        double difference = 0;

                                        if (position != 0)
                                            difference = file_size / position;
                                        if (difference != 0)
                                            progress = 100 / (difference);


                                        Tuple<string, CancellationTokenSource>? previous_value = null;
                                        pending_upload_progress_data.TryGetValue(e.File.Name, out previous_value);

                                        if (previous_value != null)
                                            pending_upload_progress_data.TryUpdate(e.File.Name, new Tuple<string, CancellationTokenSource>(progress.ToString("F2"), source), previous_value);

                                        await InvokeAsync(() =>
                                    {
                                        StateHasChanged();
                                    });
                                    }
                                    else
                                    {
                                        if (allow_task_cancellation == true)
                                        {
                                            pending_upload_progress_data.Remove(e.File.Name, out _);
                                            pending_upload_progress_data.Remove(e.File.Name, out _);
                                            timer.Dispose();

                                            await InvokeAsync(() =>
                                            {
                                                if (pending_upload_progress_data.Count == 0)
                                                {
                                                    UploadInProgress = false;
                                                    StateHasChanged();
                                                }
                                            });

                                            client?.CancelPendingRequests();
                                        }
                                    }
                                }
                                catch { }
                            };
                            timer.Interval = 500;
                            timer.Start();



                            HttpResponseMessage responseMessage = await client.PostAsync(payload.Item1, payload.Item3);
                            allow_task_cancellation = false;

                            PayloadModel? response = await responseMessage.Content.ReadAsAsync<PayloadModel>();
                            pending_upload_progress_data.Remove(e.File.Name, out _);
                            pending_upload_progress_data.Remove(e.File.Name, out _);
                            timer?.Dispose();

                            if (responseMessage.StatusCode == System.Net.HttpStatusCode.OK)
                            {
                                if (response.StatusCode == System.Net.HttpStatusCode.OK && response.result.Contains("File upload successful") == true)
                                {
                                    if (pending_upload_progress_data.Count == 0)
                                        UploadInProgress = false;
                                    GetDirectoryInfo(true);
                                    goto DoNotRenderNotification;
                                }
                                else
                                {
                                    if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                                        InvalidLogInSessionKey = true;
                                    notificationType = Notifications.NotificationType.Error;
                                }

                                notificationMessage = response.result;
                            }
                            else
                            {
                                if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                                    InvalidLogInSessionKey = true;

                                notificationType = Notifications.NotificationType.Error;
                                if (response.result != null)
                                    notificationMessage = response.result;
                                else
                                    notificationMessage = "Internal server error";
                            }
                        }

                    }
                    catch (Exception E)
                    {
                        pending_upload_progress_data.Remove(e.File.Name, out _);
                        pending_upload_progress_data.Remove(e.File.Name, out _);
                        timer.Dispose();

                        if (E.Message.Contains("The operation was canceled") == false)
                        {
                            notificationType = Notifications.NotificationType.Error;
                            notificationMessage = "Could not upload file";
                        }
                        else
                        {
                            goto DoNotRenderNotification;
                        }
                    }
                    finally
                    {
                        await payload.Item2.DisposeAsync();
                    }
                }
                else
                {
                    pending_upload_progress_data.Remove(e.File.Name, out _);
                    pending_upload_progress_data.Remove(e.File.Name, out _);
                    timer.Dispose();

                    notificationType = Notifications.NotificationType.Error;
                    notificationMessage = "Could not read file";
                }

                if (pending_upload_progress_data.Count == 0)
                    UploadInProgress = false;

                ShowNotification = true;
                StateHasChanged();
            DoNotRenderNotification:;
            }
            catch
            {
                pending_upload_progress_data.Remove(e.File.Name, out _);
                pending_upload_progress_data.Remove(e.File.Name, out _);
                timer.Dispose();

                if (pending_upload_progress_data.Count == 0)
                    UploadInProgress = false;

                StateHasChanged();

                notificationType = Notifications.NotificationType.Error;
                notificationMessage = "Could not upload file";
            }
        }
    }

    public void CreateDirectory()
    {
        validationType = ValidationPanel.ValidationType.DirectoryName;
        validationInputTopic = "Directory";
        placeholder = "Directory name";
        ShowValidationPanel = true;
    }

    private void CloseValidationPanel()
    {
        ShowValidationPanel = false;
        StateHasChanged();
    }

    private async void ValidationProcedure(string? code, ValidationPanel.ValidationType validationType)
    {
        if(Loaded == true)
        {
            try
            {
                string? log_in_session_key = null;

                if (Shared.configurations?.use_secure_local_storage == true)
                {
                    ProtectedBrowserStorageResult<string> log_in_session_key_result = await protectedLocalStorage.GetAsync<string>("AuthCache");
                    log_in_session_key = log_in_session_key_result.Value;
                }
                else
                {
                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                    log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    await module.DisposeAsync();
                }



                using(HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig))
                {

                    client.BaseAddress = new Uri(NavigationManager.BaseUri);

                    if (validationType == ValidationPanel.ValidationType.DirectoryName)
                    {

                        HttpResponseMessage responseMessage = await client.PostAsync(await DirectoryUploadPayloadBuilder.DirectoryUpload(code, Path, log_in_session_key), null);
                        string response = await responseMessage.Content.ReadAsStringAsync();
                        notificationMessage = response;

                        if (response.Contains("Directory upload successful") == true)
                        {
                            GetDirectoryInfo(true);
                        }
                        else if (response.Contains("Log in session key expired") == true || response.Contains("Log in session not approved") == true || response.Contains("Log in session not approved") == true || response.Contains("Invalid log in session key") == true)
                        {
                            notificationType = Notifications.NotificationType.Error;
                            InvalidLogInSessionKey = true;
                            ShowNotification = true;
                        }
                        else
                        {
                            notificationType = Notifications.NotificationType.Error;
                            ShowNotification = true;
                        }
                    }
                }

                ShowValidationPanel = false;
                StateHasChanged();
            }
            catch { }
        }
    }

    private async void CloseNotification()
    {
        if (Loaded == true)
        {
            ShowNotification = false;
            if (InvalidLogInSessionKey == true)
            {
                await LogOut();
                NavigationManager.NavigateTo("/log-in", true);
            }
            else
            {
                StateHasChanged();
            }
        }
    }

    private async Task LogOut()
    {
        if(Loaded == true)
        {
            try
            {
                string? key = null;
                IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "././js/functions.js");

                if (Shared.configurations?.use_secure_local_storage == true)
                {
                    ProtectedBrowserStorageResult<string> log_in_session_key_result = await protectedLocalStorage.GetAsync<string>("AuthCache");
                    key = log_in_session_key_result.Value;
                }
                else
                {
                    key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    await module.DisposeAsync();
                }

                StringBuilder builder = new StringBuilder("/validation/delete-session?value=");
                builder.Append(System.Web.HttpUtility.UrlEncode(key));

                using (HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig))
                {
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);
                    HttpResponseMessage responseMessage = await client.DeleteAsync(builder.ToString());

                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        await protectedLocalStorage.DeleteAsync("AuthCache");
                    }
                    else
                    {
                        await module.InvokeVoidAsync("Delete_Cache", "auth", "AuthCache");
                    }
                }

                await module.DisposeAsync();
            }
            catch { }
        }
    }

    public void Sort(FilterPanel.Order order_, FilterPanel.Type type_)
    {
        order = order_;
        type = type_;
        GetDirectoryInfo(true);
    }

    public void Search()
    {
        SearchFilterEnabled = true;
        GetDirectoryInfo(true);
    }

    public void FileOperation(DirectoryItemComponent.FileOperation fileOperation, DirectoryItem? item)
    {
        switch (fileOperation)
        {
            case DirectoryItemComponent.FileOperation.Details:
                ShowDetails(item);
                break;
            case DirectoryItemComponent.FileOperation.Download:
                DownloadFile(item);
                break;
            case DirectoryItemComponent.FileOperation.Delete:
                DeleteFile(item);
                break;
            case DirectoryItemComponent.FileOperation.Move:
                RelocateFile(item);
                break;
            case DirectoryItemComponent.FileOperation.Rename:
                RenameFile(item);
                break;
            case DirectoryItemComponent.FileOperation.Open:
                Open(item?.name);
                break;
        }
    }

    public void ShowDetails(DirectoryItem? item)
    {
        currentDirectoryItem = item;
        ShowDirectoryItemDetails = true;
        StateHasChanged();
    }

    private void CloseDetails()
    {
        ShowDirectoryItemDetails = false;
        StateHasChanged();
    }

    private void CloseFileManipulationPanel()
    {
        ShowFileManipulationPanel = false;
        StateHasChanged();
    }

    private void CloseFileRelocationPanel(){
        ShowFileRelocationPanel = false;
        StateHasChanged();
    }

    private void ProcessFileManipulation(PayloadModel? response)
    {
        if (response.StatusCode == System.Net.HttpStatusCode.OK && response.result.Contains("successful") == true)
        {
            ShowFileManipulationPanel = false;
            GetDirectoryInfo(true);
        }
        else
        {
            if (response.result.Contains("Log in") == true || response.result.Contains("log in") == true)
                InvalidLogInSessionKey = true;
            ShowNotification = true;
            notificationType = Notifications.NotificationType.Error;
            notificationMessage = response.result;

            StateHasChanged();
        }
    }

    private async void DownloadFile(DirectoryItem? item)
    {
        if(Loaded)
        {
            try
            {
                if (item != null)
                {
                    string? log_in_session_key = null;
                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");

                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        ProtectedBrowserStorageResult<string> log_in_session_key_result = await protectedLocalStorage.GetAsync<string>("AuthCache");
                        log_in_session_key = log_in_session_key_result.Value;
                    }
                    else
                    {
                        log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    }

                    string formated_query_content = QueryParsing.QueryParser(new FileOperationMetadata()
                        {
                            key = log_in_session_key,
                            file_name = item.name,
                            path = Path,
                            file_length = item.size,
                        });

                    string formatted_url = new StringBuilder("/files/get?").Append(formated_query_content).ToString();

                    await module.InvokeVoidAsync("BrowserManagedFileDownload", formatted_url, item.name);

                    await module.DisposeAsync();

                    GetDirectoryInfo(false);
                }
            }
            catch { }
        }
    }

    private async void DeleteFile(DirectoryItem? item)
    {
        if(Loaded)
        {
            try
            {

                string? log_in_session_key = null;

                if (Shared.configurations?.use_secure_local_storage == true)
                {
                    ProtectedBrowserStorageResult<string> log_in_session_key_result = await protectedLocalStorage.GetAsync<string>("AuthCache");
                    log_in_session_key = log_in_session_key_result.Value;
                }
                else
                {
                    IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                    log_in_session_key = await module.InvokeAsync<string>("Get_Cache", "auth", "AuthCache");
                    await module.DisposeAsync();
                }

                string formatted_url = String.Empty;

                if (item?.isDirectory == false)
                {
                    string formated_query_content = QueryParsing.QueryParser(new FileOperationMetadata()
                        {
                            key = log_in_session_key,
                            file_name = item.name,
                            path = Path,
                            file_length = item.size,
                        });
                    formatted_url = new StringBuilder("/files/delete?").Append(formated_query_content).ToString();
                }
                else
                {
                    string formated_query_content = QueryParsing.QueryParser(new DirectoryOperationMetadata()
                        {
                            key = log_in_session_key,
                            directory_name = item?.name,
                            path = Path,
                        });
                    formatted_url = new StringBuilder("/directories/delete?").Append(formated_query_content).ToString();
                }

                using (HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig))
                {
                    client.BaseAddress = new Uri(NavigationManager.BaseUri);

                    HttpResponseMessage message = await client.DeleteAsync(formatted_url);
                    GetDirectoryInfo(true);
                }
            }
            catch { }
        }
    }

    private void RenameFile(DirectoryItem? item)
    {
        ShowFileManipulationPanel = true;
        currentDirectoryItem = item;
        StateHasChanged();
    }

    private void RelocateFile(DirectoryItem? item)
    {
        ShowFileRelocationPanel = true;
        currentDirectoryItem = item;
        StateHasChanged();
    }

    private void Open(string? item)
    {
        items?.Clear();
        Path = FileSystemFormatter.NavigateForward(Path, item);
        GetDirectoryInfo(true);
    }

    private void Back()
    {
        items?.Clear();
        Path = FileSystemFormatter.NavigateBackward(Path);
        GetDirectoryInfo(true);
    }

    private Task<List<DirectoryItem>?> SearchFilter(List<DirectoryItem>? items)
    {
        if(SearchContent != null && SearchContent != String.Empty)
            items?.RemoveAll(items => items?.name?.Contains(SearchContent) == false);
        return Task.FromResult(items);
    }

    private void ClearSearchFilter()
    {
        SearchFilterEnabled = false;
        SearchContent = null;
        GetDirectoryInfo(true);
    }
}