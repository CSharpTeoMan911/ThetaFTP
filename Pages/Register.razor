@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared.Classes;
@using ThetaFTP.Shared.Models;
@using System.Text;
@inject NavigationManager NavigationManager;
@inject IHttpClientFactory httpFactory;
@page "/register";

<PanelComponent style="padding:calc(46px + 0.5vw) calc(26px + 0.3vw) calc(46px + 0.5vw) calc(26px + 0.3vw);background:linear-gradient(90deg, #D6D6D6 0%, #B0B0B0 75%)">
    <Component>
        @if (ShowNotification == true)
        {
            <Notifications NotificationMessage="@NotificationMessage" notificationType="@NotificationType" closeNotification="CloseNotification" style="z-index: 10" />
        }
        <TitleSection title="Register" />
        <InputSection inputSectionTitle="Email" placeholder="Email" inputValue="new InputSection.InputValue(OnEmailValue)" isPassword="false" input_with_button="false" />
        <br/>
        <InputSection inputSectionTitle="Password" placeholder="Password" inputValue="new InputSection.InputValue(OnPasswordValue)" isPassword="true" input_with_button="false" />
        <br />
        <InputSection inputSectionTitle="Re-Password" placeholder="Repeat password" inputValue="new InputSection.InputValue(OnRePasswordValue)" isPassword="true" input_with_button="false" />
        <div style="display:flex;flex-direction:column;margin-top:40px;padding-left:20px; padding-right:20px">
            <button class="_auth_action" @onclick=SignUp>
                Sign Up
            </button>
            <button class="_auth_navigation" @onclick=NavigateToLogIn>
                Already have an account? Click to login.
            </button>
        </div>
    </Component>
</PanelComponent>

@code {

    private string? Email { get; set; }
    private string? Password { get; set; }
    private string? Re_Password { get; set; }

    private bool ShowNotification { get; set; }
    private Notifications.NotificationType NotificationType { get; set; }
    private string? NotificationMessage { get; set; }

    private bool NavigateToLogInOnPanelClose { get; set; }
    private bool Loaded { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender == true)
        {
            Loaded = true;
            StateHasChanged();
        }
    }

    private void NavigateToLogIn()
    {
        if(Loaded == true)
            NavigationManager.NavigateTo("log-in", false);
    }

    private void OnEmailValue(string? value)
    {
        Email = value;
    }

    private void OnPasswordValue(string? value)
    {
        Password = value;
    }

    private void OnRePasswordValue(string? value)
    {
        Re_Password = value;
    }

    private async void SignUp()
    {
        try
        {
            if (Loaded == true)
            {
                if (Password == Re_Password)
                {
                    AuthenticationModel authentication = new AuthenticationModel();
                    authentication.email = Email;
                    authentication.password = Password;

                    string query_parameters = QueryParsing.QueryParser<AuthenticationModel>(authentication);

                    StringBuilder builder = new StringBuilder(NavigationManager.BaseUri);
                    builder.Append("authentication/insert?");
                    builder.Append(query_parameters);

                    using (HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig))
                    {
                        HttpResponseMessage message = await client.PostAsync(builder.ToString(), null);
                        PayloadModel response = await message.Content.ReadAsAsync<PayloadModel>();

                        if (message.StatusCode == System.Net.HttpStatusCode.OK)
                        {
                            if (response.StatusCode == System.Net.HttpStatusCode.OK && response?.result?.Contains("Registration successful") == true)
                            {
                                NotificationType = Notifications.NotificationType.Information;
                                NavigateToLogInOnPanelClose = true;
                            }
                            else
                            {
                                NotificationType = Notifications.NotificationType.Error;
                            }

                            NotificationMessage = response?.result;
                        }
                        else
                        {
                            NotificationType = Notifications.NotificationType.Error;
                            if (response?.result != null)
                                NotificationMessage = response?.result;
                            else
                                NotificationMessage = "Internal server error";
                        }
                    }
                }
                else
                {
                    NotificationType = Notifications.NotificationType.Error;
                    NotificationMessage = "Passwords do not match";
                }

                ShowNotification = true;
                StateHasChanged();
            }
        }
        catch{}
    }

    private void CloseNotification()
    {
        if (Loaded == true)
        {
            ShowNotification = false;

            if (NavigateToLogInOnPanelClose == true)
                NavigationManager.NavigateTo("/log-in", true);
            else
                StateHasChanged();
        }
    }
}
