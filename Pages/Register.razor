@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared.Classes;
@using ThetaFTP.Shared.Models;
@using System.Text;
@inject NavigationManager NavigationManager;
@page "/register";

<PanelComponent>
    <Component>
        @if (ShowNotification == true)
        {
            <Notifications NotificationMessage="@NotificationMessage" notificationType="@NotificationType" closeNotification="CloseNotification" />
        }
        <TitleSection title="Register" />
        <InputSection inputSectionTitle="Email" inputValue="new InputSection.InputValue(OnEmailValue)" isPassword="false" />
        <br/>
        <InputSection inputSectionTitle="Password" inputValue="new InputSection.InputValue(OnPasswordValue)" isPassword="true" />
        <br />
        <InputSection inputSectionTitle="Re-Password" isPassword="true" />
        <div style="display:flex;flex-direction:column;margin-top:40px;">
            <button class="auth_action" @onclick=SignUp>
                Sign Up
            </button>
            <button class="auth_navigation" @onclick=NavigateToLogIn>
                Already have an account? Click to login.
            </button>
        </div>
    </Component>
</PanelComponent>

@code {

    private string? Email { get; set; }
    private string? Password { get; set; }

    private bool ShowNotification { get; set; }
    private Notifications.NotificationType NotificationType { get; set; }
    private string? NotificationMessage { get; set; }

    private void NavigateToLogIn()
    {
        Console.WriteLine("register");
        NavigationManager.NavigateTo("log-in", false);
    }

    private void OnEmailValue(string? value)
    {
        Email = value;
    }

    private void OnPasswordValue(string? value)
    {
        Password = value;
    }

    private async void SignUp()
    {
        AuthenticationModel authentication = new AuthenticationModel();
        authentication.email = Email;
        authentication.password = Password;

        string query_parameters = await QueryParsing.QueryParser<AuthenticationModel>(authentication);

        StringBuilder builder = new StringBuilder(NavigationManager.BaseUri);
        builder.Append("authentication/insert?");
        builder.Append(query_parameters);

        HttpClient client = HttpClientGen.Generate(true);
        HttpResponseMessage message = await client.PostAsync(builder.ToString(), null);
        string message_string = await message.Content.ReadAsStringAsync();


        if (message_string == "Registration successful")
        {
            NotificationType = Notifications.NotificationType.Information;
        }
        else
        {
            NotificationType = Notifications.NotificationType.Error;
        }

        NotificationMessage = message_string;
        ShowNotification = true;
        StateHasChanged();
    }

    private void CloseNotification()
    {
        ShowNotification = false;
        StateHasChanged();
    }
}
