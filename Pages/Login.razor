@page "/log-in"
@using ThetaFTP.Shared.Formatters;
@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared.Classes;
@using ThetaFTP.Shared.Models;
@using System.Text;
@inject NavigationManager NavigationManager;
@inject IHttpClientFactory httpFactory;
@inject IJSRuntime JS;

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage protectedLocalStorage;

<PanelComponent Id="auth_panel" style="padding:calc(46px + 0.5vw) calc(26px + 0.3vw) calc(46px + 0.5vw) calc(26px + 0.3vw);">
    <Component>
        @if (ShowAccountsApprovalPanel == true)
        {
            <ValidationPanel validationInputTopic=@validationInputTopic closeAccountValidationPanel="CloseAccountValidation" initiateValidationProcedure=ValidationProcedure validationType="ValidationPanel.ValidationType.AccountAuthorisation" />
        }
        else if (ShowLogInSessionValidationPanel == true)
        {
            <ValidationPanel validationInputTopic=@validationInputTopic closeAccountValidationPanel="CloseLogInSessionValidation" initiateValidationProcedure=ValidationProcedure validationType="ValidationPanel.ValidationType.LogInSessionAuthorisation" />
        }

        @if(ShowNotification == true){
            <Notifications NotificationMessage="@NotificationMessage" notificationType="@NotificationType" closeNotification="CloseNotification" style="z-index: 10"/>
        }
        <TitleSection title="Log In" />
        <InputSection inputSectionTitle="Email" placeholder="Email" inputValue="new InputSection.InputValue(OnEmailValue)" isPassword="false" input_with_button="false" />
        <br/>
        <InputSection inputSectionTitle="Password" placeholder="Password" inputValue="new InputSection.InputValue(OnPasswordValue)" isPassword="true" input_with_button="false" />
        <div style="display:flex;flex-direction:column;margin-top:40px;">
            <button class="auth_action" @onclick=SignIn>
                Sign In
            </button>
            <button class="auth_navigation" @onclick=NavigateToRegister>
                Don't have an account? Click to register.
            </button>
        </div>
    </Component>
</PanelComponent>

@code {

    private string? Email { get; set; }
    private string? Password { get; set; }

    private bool ShowNotification { get; set; }
    private Notifications.NotificationType NotificationType { get; set; }
    private string? NotificationMessage { get; set; }

    private bool ShowAccountsApprovalPanel { get; set; }
    private bool ShowLogInSessionValidationPanel { get; set; }

    private bool ShowAccountsApprovalPanelOnClose { get; set; }
    private bool ShowLogInSessionValidationPanelOnClose { get; set; }

    private bool NavigateToMainPageOnClose { get; set; }
    private bool Loaded { get; set; }

    private readonly string validationInputTopic = "Validation code";

    // ADD CALLBACK METHODS FOR THE 'input' SECTIONS
    private void NavigateToRegister()
    {
        if(Loaded == true)
            NavigationManager.NavigateTo("register", false);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender){
            Loaded = true;
            StateHasChanged();
        }
    }


    private async void SignIn()
    {
        if(Loaded)
        {
            AuthenticationModel authentication = new AuthenticationModel();
            authentication.email = Email;
            authentication.password = Password;

            string query_parameters = await QueryParsing.QueryParser<AuthenticationModel>(authentication);

            StringBuilder builder = new StringBuilder(NavigationManager.BaseUri);
            builder.Append("authentication/get?");
            builder.Append(query_parameters);

            HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig);
            HttpResponseMessage message = await client.GetAsync(builder.ToString());
            string response = await message.Content.ReadAsStringAsync();

            ServerPayloadModel? serverPayload = await JsonFormatter.JsonDeserialiser<ServerPayloadModel>(response);

            if (serverPayload != null)
            {
                if (serverPayload.response_message?.Contains("Account not approved") == true)
                {
                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        if (serverPayload.content != null)
                            await protectedLocalStorage.SetAsync("AuthCache", serverPayload.content);
                    }
                    else
                    {
                        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                        await module.InvokeVoidAsync("Insert_Cache", "auth", "AuthCache", serverPayload.content);
                        await module.DisposeAsync();
                    }

                    NotificationType = Notifications.NotificationType.Information;
                    NotificationMessage = "Account not approved. Verify the inbox of your email address used for this account.";
                    ShowAccountsApprovalPanelOnClose = true;
                }
                else if (serverPayload.response_message?.Contains("Authentication successful") == true)
                {
                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        if (serverPayload.content != null)
                            await protectedLocalStorage.SetAsync("AuthCache", serverPayload.content);
                    }
                    else
                    {
                        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                        await module.InvokeVoidAsync("Insert_Cache", "auth", "AuthCache", serverPayload.content);
                        await module.DisposeAsync();
                    }

                    NotificationType = Notifications.NotificationType.Information;
                    NotificationMessage = serverPayload.response_message;
                    NavigateToMainPageOnClose = true;
                }
                else if (serverPayload.response_message?.Contains("Check the code sent to your email address to approve your log in session") == true)
                {
                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        if (serverPayload.content != null)
                            await protectedLocalStorage.SetAsync("AuthCache", serverPayload.content);
                    }
                    else
                    {
                        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                        await module.InvokeVoidAsync("Insert_Cache", "auth", "AuthCache", serverPayload.content);
                        await module.DisposeAsync();
                    }

                    NotificationType = Notifications.NotificationType.Information;
                    NotificationMessage = serverPayload.response_message;
                    ShowLogInSessionValidationPanelOnClose = true;
                }
                else if (serverPayload.response_message?.Contains("Invalid email") == true || serverPayload.response_message?.Contains("Invalid password") == true || serverPayload.response_message?.Contains("Invalid credentials") == true || serverPayload.response_message?.Contains("Internal server error") == true)
                {
                    NotificationType = Notifications.NotificationType.Error;
                    NotificationMessage = serverPayload.response_message;
                }

            }
            else
            {
                NotificationType = Notifications.NotificationType.Error;
                NotificationMessage = "Internal server error";
            }

            ShowNotification = true;
            StateHasChanged();
        }
    }

    private void OnEmailValue(string? value)
    {
        Email = value;
    }

    private void OnPasswordValue(string? value)
    {
        Password = value;
    }

    private void CloseNotification()
    {
        if (Loaded == true)
        {
            if (ShowAccountsApprovalPanelOnClose == true)
                ShowAccountsApprovalPanel = true;
            if (ShowLogInSessionValidationPanelOnClose == true)
                ShowLogInSessionValidationPanel = true;
            ShowAccountsApprovalPanelOnClose = false;
            ShowLogInSessionValidationPanelOnClose = false;
            ShowNotification = false;
            StateHasChanged();

            if (NavigateToMainPageOnClose == true)
                NavigationManager.NavigateTo(NavigationManager.BaseUri, true);
        }
    }

    private void CloseAccountValidation()
    {
        ShowAccountsApprovalPanel = false;
        StateHasChanged();
    }

    private void CloseLogInSessionValidation()
    {
        ShowLogInSessionValidationPanel = false;
        StateHasChanged();
    }

    private async void ValidationProcedure(string? code, ValidationPanel.ValidationType validationType)
    {
        if(Loaded)
        {
            ValidationModel model = new ValidationModel()
                {
                    email = Email,
                    code = code
                };

            string formatted_model = await QueryParsing.QueryParser<ValidationModel>(model);

            StringBuilder validation_builder = new StringBuilder();

            switch (validationType)
            {
                case ValidationPanel.ValidationType.AccountAuthorisation:
                    validation_builder.Append("/validation/validate-account?");
                    break;
                case ValidationPanel.ValidationType.LogInSessionAuthorisation:
                    validation_builder.Append("/validation/validate-code?");
                    break;
            }
            validation_builder.Append(formatted_model);

            string validation_query = validation_builder.ToString();

            HttpClient client = httpFactory.CreateClient(Shared.HttpClientConfig);
            client.BaseAddress = new Uri(NavigationManager.BaseUri);
            HttpResponseMessage result = await client.GetAsync(validation_query);

            string result_message = await result.Content.ReadAsStringAsync();
            ServerPayloadModel? serverPayload = await JsonFormatter.JsonDeserialiser<ServerPayloadModel>(result_message);

            if (serverPayload != null)
            {
                if (serverPayload.response_message?.Contains("Account authorised") == true)
                {
                    if (Shared.configurations?.use_secure_local_storage == true)
                    {
                        if (serverPayload.content != null)
                            await protectedLocalStorage.SetAsync("AuthCache", serverPayload.content);
                    }
                    else
                    {
                        IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
                        await module.InvokeVoidAsync("Insert_Cache", "auth", "AuthCache", serverPayload.content);
                        await module.DisposeAsync();
                    }

                    NotificationType = Notifications.NotificationType.Information;
                    NotificationMessage = "Authentication successful.";
                    NavigateToMainPageOnClose = true;
                }
                else if (serverPayload.response_message?.Contains("Authentication successful") == true)
                {
                    NotificationType = Notifications.NotificationType.Information;
                    NotificationMessage = "Authentication successful.";
                    NavigateToMainPageOnClose = true;
                }
                else if (serverPayload.response_message?.Contains("Invalid email") == true || serverPayload.response_message?.Contains("Invalid code") == true || serverPayload.response_message?.Contains("Internal server error") == true)
                {
                    NotificationType = Notifications.NotificationType.Error;
                    NotificationMessage = serverPayload.response_message;
                }
            }
            else
            {
                NotificationType = Notifications.NotificationType.Error;
                NotificationMessage = "Internal server error";
            }

            ShowNotification = true;
            StateHasChanged();
        }
    }
}
