@page "/log-in"
@using ThetaFTP.Pages.Components;
@using ThetaFTP.Shared.Classes;
@using ThetaFTP.Shared.Models;
@using System.Text;


@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;

<PanelComponent>
    <Component>
        @if (ShowAccountsApprovalPanel == true)
        {
            <AccountValidationPanel closeAccountValidationPanel="CloseAccountValidation"/>
        }
        @if(ShowNotification == true){
            <Notifications NotificationMessage="@NotificationMessage" notificationType="@NotificationType" closeNotification="CloseNotification"/>
        }
        <TitleSection title="Log In" />
        <InputSection inputSectionTitle="Email" inputValue="new InputSection.InputValue(OnEmailValue)" isPassword="false" />
        <br/>
        <InputSection inputSectionTitle="Password" inputValue="new InputSection.InputValue(OnPasswordValue)" isPassword="true" />
        <div style="display:flex;flex-direction:column;margin-top:40px;">
            <button class="auth_action" @onclick=SignIn>
                Sign In
            </button>
            <button class="auth_navigation" @onclick=NavigateToRegister>
                Don't have an account? Click to register.
            </button>
        </div>
    </Component>
</PanelComponent>

@code {

    private string? Email { get; set; }
    private string? Password { get; set; }

    private bool ShowNotification { get; set; }
    private Notifications.NotificationType NotificationType { get; set; }
    private string? NotificationMessage { get; set; }

    private bool ShowAccountsApprovalPanel { get; set; }
    private bool ShowLogInSessionValidationPanel { get; set; }


    // ADD CALLBACK METHODS FOR THE 'input' SECTIONS
    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("register", false);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }


    private async void SignIn()
    {
        AuthenticationModel authentication = new AuthenticationModel();
        authentication.email = Email;
        authentication.password = Password;

        string query_parameters = await QueryParsing.QueryParser<AuthenticationModel>(authentication);

        StringBuilder builder = new StringBuilder(NavigationManager.BaseUri);
        builder.Append("authentication/get?");
        builder.Append(query_parameters);

        HttpClient client = HttpClientGen.Generate(true);
        HttpResponseMessage message = await client.GetAsync(builder.ToString());
        string response = await message.Content.ReadAsStringAsync();


        if (response.Contains("Invalid") == true || response == "Internal server error")
        {
            NotificationType = Notifications.NotificationType.Error;
            NotificationMessage = response;
        }
        else if (response == "Account not approved")
        {
            NotificationType = Notifications.NotificationType.Information;
            NotificationMessage = response;
            ShowAccountsApprovalPanel = true;
        }
        else if (response == "Check the code sent to your email address to approve your log in session")
        {
            NotificationType = Notifications.NotificationType.Information;
            NotificationMessage = response;
            ShowLogInSessionValidationPanel = true;
        }
        else
        {
            NotificationType = Notifications.NotificationType.Information;
            NotificationMessage = "Authentication successful.";
            IJSObjectReference module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/functions.js");
            await module.InvokeVoidAsync("Insert_Cache", "auth", "AuthCache", response);
        }

        ShowNotification = true;
        StateHasChanged();
    }

    private void OnEmailValue(string? value)
    {
        Email = value;
    }

    private void OnPasswordValue(string? value)
    {
        Password = value;
    }

    private void CloseNotification()
    {
        ShowNotification = false;
        StateHasChanged();
    }

    private void CloseAccountValidation()
    {
        ShowAccountsApprovalPanel = false;
        StateHasChanged();
    }

    private void CloseLogInSessionValidation()
    {
        ShowLogInSessionValidationPanel = false;
        StateHasChanged();
    }
}
